컴포넌트는 언제 렌더링이 될까?

자신의 state가 변경되거나 부모에게서 받는 props가 변경되었을 때 마다 다시 렌더링 된다.
심지어 자식 컴포넌트에서 렌더링 최적화를 위한 별도의 코드를 추가하지 않으면, 부모에게서 받는 props가 변경되지 않았더라도 다시 리렌더링 된다.

함수 컴포넌트는 그냥 함수이다. jsx를 반환할 뿐이다.

함수 컴포넌트가 렌더링 된다는 것은 누군가(부모 컴포넌트)가 그 함수를 호출하여 실행되는 것이다.

함수가 실행될 때 마다 내부에 선언되어 있던 표현식(변수 등)들도 매번 다시 계산된다.

useMemo useCallback

useMemo(() => 함수, 의존성 배열)

예시 코드 링크
https://codesandbox.io/s/frosty-pine-nvhewx?file=/src/Info.js:767-900

의존성이 변경되었을 때만 메모이제이션 된 값만 다시 계산 한다.
이 최적화는 모든 렌더링 시의 고비용 계산을 방지하게 해준다.

useMemo는 성능 최적화를 위해 사용할 수는 있지만 의미상으로 보장이 있다고 생각하면 안된다.


useCallback

리랜더링이 되면 파일이 다시 읽히는 것이라 함수가 다시 선언되고 읽히는 것이기 떄문에
그걸 방지하기 위해 useCallback을 사용



React.memo
https://ko.reactjs.org/docs/react-api.html#reactmemo

React.memo는 고차 컴포넌트(Higher Order Component)입니다.

컴포넌트가 동일한 props로 동일한 결과를 렌더링해낸다면, React.memo를 호출하고 결과를 메모이징(Memoizing)하도록 래핑하여 경우에 따라 성능 향상을 누릴 수 있습니다. 
즉, React는 컴포넌트를 렌더링하지 않고 마지막으로 렌더링된 결과를 재사용합니다.

React.memo는 props 변화에만 영향을 줍니다. React.memo로 감싸진 함수 컴포넌트 구현에 useState, useReducer 또는 useContext 훅을 사용한다면, 여전히 state나 context가 변할 때 다시 렌더링됩니다.



Code splitting(코드분할)
https://ko.reactjs.org/docs/code-splitting.html

Dynamic import, React.lazy()

cra처럼 SPA만들 경우 번들러로 js파일을 하나로 만들어서 프로그램을 실행하는데 
프로젝트가 커지면 커질수록 실행하는데 느려지기 때문에  코드를 분할한다.

React.lazy 함수를 사용하면 동적 import를 사용해서 컴포넌트를 렌더링 할 수 있습니다.

const OtherComponent = React.lazy(() => import('./OtherComponent'));

lazy 컴포넌트는 suspense로 감싸야한다.

const Home = lazy(() => import('./routes/Home'));
const About = lazy(() => import('./routes/About'));

const App = () => (
  <Router>
    <Suspense fallback={<div>Loading...</div>}>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </Suspense>
  </Router>
);


웹팩이 번들링을 할때 lazy로 가져온 부분은 번들.js에 포함하지 않는다.

chunk파일을 별도로 만들어진다.

라우트를 사용하는 곳에 사용하는것이 좋다.

이를 시작하기 좋은 장소는 라우트입니다. 
웹 페이지를 불러오는 시간은 페이지 전환에 어느 정도 발생하며 대부분 페이지를 한번에 렌더링하기 때문에 사용자가 페이지를 렌더링하는 동안 다른 요소와 상호작용하지 않습니다.

React.lazy를 React Router 라이브러리를 사용해서 애플리케이션에 라우트 기반 코드 분할을 설정하는 예시입니다.