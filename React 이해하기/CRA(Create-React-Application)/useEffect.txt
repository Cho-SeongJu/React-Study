############################
Hook

공식문서 링크 : https://ko.reactjs.org/docs/hooks-intro.html

결정적으로, Hook은 존재하는 코드와 함께 나란히 작동함으로써 점진적으로 적용할 수 있습니다.
hook은 결국 class없이 react 기능들을 사용하는 방법을 제시한다.

### Effect Hook
React 컴포넌트 안에서 데이터를 가져오거나 구독하고, DOM을 직접 조작하는 작업을 이전에도 종종 해보셨을 것입니다. 
우리는 이런 모든 동작을 “side effects”(또는 짧게 “effects”)라고 합니다. 
왜냐하면 이것은 다른 컴포넌트에 영향을 줄 수도 있고, 렌더링 과정에서는 구현할 수 없는 작업이기 때문입니다.


Effect Hook, 즉 useEffect는 함수 컴포넌트 내에서 이런 side effects를 수행할 수 있게 해줍니다. 
React class의 componentDidMount 나 componentDidUpdate, componentWillUnmount와 같은 목적으로 제공되지만, 하나의 API로 통합된 것입니다. 
(useEffect와 이 세 가지 메서드를 비교하는 예시가 Using the Effect Hook 문서에 있습니다.)

useEffect 함수 사용 구조

useEffect(() => {

}, []) 

return  (
    <div>App</div>
)

빈 배열을 넣으면 componentDidMount 처럼 동작한다.

useEffect(() => {

}) 

return  (
    <div>App</div>
)

componentDidMount + componentDidUpdate 처럼 동작한다.

export default function App(props) {
    const [state, setstate] = useState(initialState)

    useEffect(() => {

    }, [state, props.a])  -> 이 배열을 의존성 배열이라 한다.

    return (
        <div>App</div>
    )
}

이렇게 하면 componentDidMount + 특정 값이 변경 되었을 때에만 해당하는 componentDidUpdate 처럼 동작한다.

import React, {useState, useEffect} from "React"

export default function App(props) {
    const [state, setstate] = useState(initialState)

    useEffect(() => {
        return() => {
            cleanup
        }
    }, [state, props.a])  -> 이 배열을 의존성 배열이라 한다.

    return (
        <div>App</div>
    )
}

이렇게 하면 componentWillUnmount


##### useEffect 심화
function Example() {
  const [count, setCount] = useState(0);

  // componentDidMount, componentDidUpdate와 비슷합니다
  useEffect(() => {
    // 브라우저 API를 이용해 문서의 타이틀을 업데이트합니다
    document.title = `You clicked ${count} times`;
  });

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}

컴포넌트가 처음 랜더링 되기 전 리턴문 실행되기 전에는 컴포넌트는 함수이기 때문에
도큐먼트에 접근이 불가능하다 따라서 함수 내에서 도큐먼트에 접근할려면 리턴문이 일어난 직후에 componentDidMount 시점에 document에 접근이 가능하다

수동으로 리액트 컴포넌트의 DOM을 수정하는 것을 useEffect에 넣는다.
API 호출도 useEffect 밖에 있으면 안된다. 컴포넌트가 랜더링 될때마다 계속 실행하기 때무에
useEffect에 빈 배열을 넣고 그때 API를 쏜다.

데이터 가져오기, 수동으로 react 컴포너는 dom 수정할 때 많이 사용한다.

정리(clean-up)를 이용하지 않는 effects
-> clean-up도 배열을 넣는것처럼 옵션이라 넣어도 되고 안넣어도 된다.

useEffect를 여러번 사용할 수 있다.
Hook을 이용하면 생명주기 메서드에 따라서가 아니라 코드가 무엇을 하는지에 따라 나눌 수가 있습니다. React는 컴포넌트에 사용된 모든 effect를 지정된 순서에 맞춰 적용합니다.

https://ko.reactjs.org/docs/hooks-effect.html