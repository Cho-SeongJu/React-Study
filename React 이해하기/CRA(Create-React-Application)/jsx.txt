JSX

공식문서 링크 : https://ko.reactjs.org/docs/introducing-jsx.html

문자열도 아니고, HTML도 아니다.

JSX라 하며 JavaScript를 확장한 문법이다. React에서는 본질적으로 렌더링 UI 로직과 연결된다.

{} 변수나 함수를 넣기 위해서는 중괄호를 사용해야 한다

JSX도 표현식이다.
컴파일이 끝나면, JSX 표현식이 정규 JavaScript 함수 호출이 되고 JavaScript 객체로 인식이 된다.

즉, JSX를 if 구문 및 for loop 안에 사용하고, 변수에 할당하고, 인자로서 받아들이고, 함수로부터 반환할 수 있다.

### JSX 속성 정의
어트리뷰트에 따옴표를 이용해 문자열 리터럴을 정의할 수 있다.

** JSX는 HTML보다는 JavaScript에 가깝기 때문에, React DOM은 HTML 어트리뷰트 이름 대신 camelCase 프로퍼티 명명 규칙을 사용한다.
ex) class -> className, tabindex -> tabIndex


### 조건부 렌더링
공식문서 : https://ko.reactjs.org/docs/conditional-rendering.html

return ()문{} 안에서는 if문과 for문을 사용할 수 없다. 조건부를 사용할 수 없다.
하지만 return ()문 {}내에서 if-else 구문을 삼항 연산자로 할 수 있다.

if문은 논리 연산자로 표현

그냥 if문을 사용하고자 하면 삼항 연산자에서는 
{name === "hwarari" ? `Hello, ${name}! Learn React` : null}
이렇게 표현했지만 이것보다는 
{name === "hwarari" && `Hello, ${name}! Learn React`}
이렇게 사용하면 된다

####조건부에서 논리연산자 &&로 if를 인라인으로 표현하기
위에 예제와 같지만 주의할 점으로 && 뒤의 엘리먼트는 조건이 true 일때만 출력이 된다. false면 react는 무시하고 건너뛴다.

fasly 표현식을 반환하면 여전히 && 뒤에 있는 표현식은 건너뛰지만 fasly 표현식이 반환된다.
그니깐 값은 출력이 된다는 소리이다.

값을 반환하고 싶지 않으면 !!를 붙이면 된다.

만약 빈 문자열이라서 false이지만 메모 : 라는 문구는 보이게 하고 싶다면
{memo !== null && `메모:${memo} `} 로 작성하면 된다.