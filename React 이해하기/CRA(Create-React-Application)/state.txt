##################################
# state

상태 값을 변경할 수 있고 변경되면 컴포넌트가 랜더링이 될 수 있게 한다.

const [state, setState] = useState(// 초기값);
state : 관리하고 있는 값
setState : 관리하고 있는 값을 변경할 때 쓰는 함수

함수 컴포넌트는 그저 함수이다.

함수 컴포넌트에서 내부적으로 상태를 관리해야 하는일이 필요하다.

import React, { useState } from "react";
const [state, setState] = useState()

setState()는 컴포넌트의 re-rendering을 발생시킨다.

## state 불변성(immutable)
불변성이란 변하지 않는 성질
프로그래밍에서 불변성을 지킨다 -> 메모리 영역의 값을 직접적으로 변경하지 않는다.

setState() -> 컴포넌트 re-rendering을 하는데
setState를 한다고 해서 무조건 일어나지 않는다.
실행하기 전 상태와 실행할 때 넣은 값과 다른지 먼저 비교를 하고 다르면 실행을 한다.

불변성을 지키지 않고, 메모리 영역의 값을 직접 변경하면 리액트는 state가 바뀌었다고 인지하지 못한다.
왜냐하면 리액트는 이전 state과 이후 state를 비교할 때 얕은 비교를 하기 때문이다.

참조타입 -> 불변성을 가지고 있지 않다.
변수에 참조 타입의 값을 할당하면, 메모리 값이 담긴 주소가 저장된다.


### 원시 타입(Referenc type) state 다루어보기 - boolean, number, string

+1 버튼 : 클릭하면 Counter 값을 1 증가
show and hide 버튼 : 클릭하면 Counter를 나타나거나 사라지게 한다.
change Operator : +, -, * 중 하나를 랜덤하게 선택하여 Counter 계산에 적용한다.

### 참조 타입(Referenc type) state 다루어보기 
const [count, setCount] = useState(0);
const [show, setShow] = useState(true);
const operators = ["+", "-", "*"];

이 구조를 참조타입으로 하나로 합치면
const [info, setInfo] = useState({
    count : 0,
    show: true,
    operator: operators[0],
});
이렇게 가능하다.

이렇게 하고 이제 setInfo({...info, operator : ~})
이렇게 해서 원래 info의 값고 새로운 operator를 비교해서 다르면 리랜더링한다.

객체는 참조타입이기 때문에 만약 새로운 변수에 객체를 복사하면 이건 얕은 복사이기 떄문에
똑같은 메모리 주소를 가르키고 값을 변경한다고 하면 리엑트에서 이 값들이 변경한 것을 탐지를 못하기 떄문에
꼭 스프레드 문법으로 스프레드 객체와 값을 넘겨줘야 한다.

Array도 가능하다
import React, {useState} from "react";
const [array, setArray] = useState("a","b", "c","d");

<잘못된 사용법>
array[0] = "e"
const newArray = array
ex) setArray(newArray)

<올바른 사용법>
ex) setArray([...array, newItem])
ex) setArray(array.filter(arr => {}))

### props와 state 비교
props
부모 컴포넌트가 자식 컴포넌트에게 전달 하는 값
값을 자신(자식 컴포넌트)이 변경할 수 없음(= 읽기 전용)

state
자신(컴포넌트)이 스스로 관리하는 상태값
값을 자신이 변경할 수 있음

공통점
props를 통해 값을 내려 받거나, 자신이 관리하고 있는 state가 변경되면 컴포넌트 렌더링이 발생한다.

### 비동기로 이루어지는 stats (state 심화) 
직접 state를 수정하면 안된다.
반드시 setState()를 사용해야한다.

React는 성능을 위해 여러 setState() 호출을 단일 업데이트로 한꺼번에 처리할 수 있다.

깃헙 링크 :
https://github.com/zerobase-school/2022-frontend-school-react/tree/master/4/4-2/4-2-1


setState()를 호출할 때 React는 제공한 객체를 현재 state로 병합합니다.
우리가 넘긴 값은 내부적으로 객체이다.

setState는 비동기적으로 실행이 된다.
비동기적으로 실행이 돼서 발생하는 문제를 피할려면 setState에 파라미터값을 넘겨주면 된다.


### 단방향 데이터 흐름

컴포넌트는 자신의 state를 자식 컴포넌트에 props로 전달할 수 있습니다.

<FormattedDate date={this.state.date} />

FormattedDate 컴포넌트는 date를 자신의 props로 받을 것이고 이것이 Clock의 state로부터 왔는지, Clock의 props에서 왔는지, 수동으로 입력한 것인지 알지 못합니다.

일반적으로 이를 “하향식(top-down)” 또는 “단방향식” 데이터 흐름이라고 합니다. 
모든 state는 항상 특정한 컴포넌트가 소유하고 있으며 그 state로부터 파생된 UI 또는 데이터는 오직 트리구조에서 자신의 “아래”에 있는 컴포넌트에만 영향을 미칩니다

### state 끌어올리기
A컴포넌트 자식에 B, C 컴포넌트가 있다고 가정한다.
B컴포넌트에 있던 state를 C컴포넌트에서도 사용하고 싶다면
B컴포넌트 state를 A컴포넌트애 끌어올리면 된다. 그러면 
B, C 컴포넌트는 A컴포넌트로부터 props를 받도록 하는게 state 끌어올리기의 개념이다.

이렇게 되면 단일 진실 공급원
데이터를 한곳에서만 제어 편집할수있도록 설계해야한다.

state 끌어올리기 실습
깃헙 링크
https://github.com/zerobase-school/2022-frontend-school-react/tree/master/4/4-2/4-2-4


