리액트란?

프론트엔드 개발을 보다 체계적으로 할 수 있게 도와주는 라이브러리

라이브러리란?
- 다른 사람들이 개발한 기능을 쉽게 가져다 쓸 수 있도록 만들어진 코드
- 아무곳에서나 불러서 사용할 수 있다.

프레임워크란?
- 복잡한 소프트웨어를 간단하게 만들 수 있게 짜여진 코드 집합체
- 개발한 사람들이 의도한 대로 코드를 작성해야함
ex) Next.js

선언형이고 컴포넌트 기반이고 재사용성이 있다

선언형: 어떤 방법으로 해야하는지를 나타내기보다 무엇과 같은지를 선언
코드를 짜는 방식이 선언형이다.

직관적으로 각 상태에 따른 필요한 뷰를 만들고 리액트가 필요한 부분만 효율적으로 렌더링해준다.

이 컴포넌트를 그려주세요 이 컴포넌트는 어떻게 생겼다 라고 선언만 해주는 것이 리액트 코드 작성 방식이다.

컴포넌트
: 조그만 부분부분들을 컴포넌트로 작성
-> 컴포넌트들을 조합해 한 페이지를 만든다.
-> 각 컴포넌트는 독립적으로 작동한다.

재사용성
: node.js 서버에서 먼저 렌더링을 해서 내려줄 수 있고, react native에서 사용할 수도 있다.

-------------------------------------------------------------------------------------------------------------------

Node.js란?
- Javascript는 웹 브라우저에서만 실행이 가능하도록 나온 언어이다. 이 Javascript를 데스크톱에서도 실행할 수 있게 해주는 런타임이다.

런타임은?
코드는 컴퓨터가 바로 이해하지 못한다. 자바스크립트는 컴파일링을 하지 않는다. 코드를 읽어서 컴퓨터가 이해할 수 있도록 해주는 역할을 한다.


nvm(Node Version Manager)
Node.js는 활발히 개발되는 언어이기 때문에 수없이 많은 버전이 존재
프로젝트 별로 다른 Node.js 버전을 활용할 떄가 많다
이런 문제를 해결하기 위해 nvm이 등장
`.nvmrc` 파일을 통해 프로젝트별 node.js 버전을 관리
`nvm use`커맨드를 이용해서 `.nvmrc` 내부의 버전으로 교체 가능

volta
Rust로 개발된 Nvm의 대체제
빠르다
`volta pin` 커맨드를 통해 프로젝트별 node.js 버전을 관리
`nvm`과 다르게 프로젝트를 이동하면 알아서 알맞는 node.js 버전으로 적용시켜준다.