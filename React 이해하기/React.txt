리액트란?

프론트엔드 개발을 보다 체계적으로 할 수 있게 도와주는 라이브러리

라이브러리란?
- 다른 사람들이 개발한 기능을 쉽게 가져다 쓸 수 있도록 만들어진 코드
- 아무곳에서나 불러서 사용할 수 있다.

프레임워크란?
- 복잡한 소프트웨어를 간단하게 만들 수 있게 짜여진 코드 집합체
- 개발한 사람들이 의도한 대로 코드를 작성해야함
ex) Next.js

선언형이고 컴포넌트 기반이고 재사용성이 있다

선언형: 어떤 방법으로 해야하는지를 나타내기보다 무엇과 같은지를 선언
코드를 짜는 방식이 선언형이다.

직관적으로 각 상태에 따른 필요한 뷰를 만들고 리액트가 필요한 부분만 효율적으로 렌더링해준다.

이 컴포넌트를 그려주세요 이 컴포넌트는 어떻게 생겼다 라고 선언만 해주는 것이 리액트 코드 작성 방식이다.

컴포넌트
: 조그만 부분부분들을 컴포넌트로 작성
-> 컴포넌트들을 조합해 한 페이지를 만든다.
-> 각 컴포넌트는 독립적으로 작동한다.

재사용성
: node.js 서버에서 먼저 렌더링을 해서 내려줄 수 있고, react native에서 사용할 수도 있다.

-------------------------------------------------------------------------------------------------------------------

Node.js란?
- Javascript는 웹 브라우저에서만 실행이 가능하도록 나온 언어이다. 이 Javascript를 데스크톱에서도 실행할 수 있게 해주는 런타임이다.

런타임은?
코드는 컴퓨터가 바로 이해하지 못한다. 자바스크립트는 컴파일링을 하지 않는다. 코드를 읽어서 컴퓨터가 이해할 수 있도록 해주는 역할을 한다.


nvm(Node Version Manager)
Node.js는 활발히 개발되는 언어이기 때문에 수없이 많은 버전이 존재
프로젝트 별로 다른 Node.js 버전을 활용할 떄가 많다
이런 문제를 해결하기 위해 nvm이 등장
`.nvmrc` 파일을 통해 프로젝트별 node.js 버전을 관리
`nvm use`커맨드를 이용해서 `.nvmrc` 내부의 버전으로 교체 가능

volta
Rust로 개발된 Nvm의 대체제
빠르다
`volta pin` 커맨드를 통해 프로젝트별 node.js 버전을 관리
`nvm`과 다르게 프로젝트를 이동하면 알아서 알맞는 node.js 버전으로 적용시켜준다.

------------------------------------------------------------
Package Manager

Node.js에는 수없이 많은 라이브러리(패키지)가 존재
이 패키지들을 활용하려면 설치를 해야함

NPM(Node Package Manager)
Node.js에서 활용할 수 있는 수없이 많은 라이브러리들을 설치할 수 있게 해주는 툴이다.

yarn
처음에는 npm이 느려서 facebook에서 출시한 패키지 매니저
지금은 npm도 충분히 빨라 npm과 속도차이가 잘 나지 않는다.
v3까지 나왔는데 v3에서부터는 plug and paly등의 유니크한 기능을 제공한다.

pnpm
기존 npm과 yarn의 문제점을 해결하기 위해 나온 패키지 매니저
npm / yarn 에서는 ghost dependency 문제가 있다.
pnpm은 그 문제점을 해결하여 예상치 못한 버그를 방지

ghost dependency : 직접 설치하지 않은 패키지이나, 설치한 패키지가 의존하는 패키지여서 같이 설치된 패키지.

create react app
- react개발팀에서 만든 공식적인 툴
- react만을 지원

vite
- vue.js를 위한 번들러로 처음 출시된 툴
- vue뿐만이 아니라 react/ preact/ lit/ svelte도 지원

cra 
번들러 : webpack
트랜스파일러 : babel
린터 : eslint 사용

장점
- 빌드 툴 공부를 별도로 굳이 하지 않아도 된다.
- 각종 툴 버전을 신경 쓰지 않아도 된다.
- react-scripts 의존성 하나만 있고, 해당 패키지가 모든 툴을 관리한다.
- 툴들을 원하는 대로 커스텀하고 싶으면 eject 스크립트를 실행하여 커스텀 가능

vite 
CRA보다 더 빠르고 커스터마이징하기 더 좋다.

개발 서버 실행 시에는 따로 bunling하지 않고 소스를 바로 로드
- 디버깅이 수월하다
번들러 : Rollup 사용
- Webpack보다 훨씬 빠른 빌드 속도
- 빌드 결과물이 Webpack보다 용량이 작고 ES6 Module로 출력

장점 :
- 원하는 툴들을 입맛에 맞게 설치해 쓸 수 있다.
- 빠른속도


번들러
프로젝트를 진행하다 보면 굉장히 많은 양의 코드가 생성된다.
실제 운영되는 서버에서 이 많은 양의 파일을 일일히 다 로딩하려면 로딩속도가 너무 느려진다.
번들러는 이 많은 코드들을 하나의 번들 파일로 묶어주는 역할

트랜스파일러
매년 Javascript가 발전하면서 새로운 기능들이 추가
하지만 오래된 브라우저는 아직 로운 javascript 기능을 실행하지 못한다.
개발할때는 이런 기능을 사용하고 싶은데?
-> 트랜스 파일러를 통해 호환성이 좋은 코드로 변환하자!

린터
개발할 때 여러 개발자가 같이 협업하다 보면 각자 코딩하는 스타일이 다르기 쉬움
린터를 통해서 코드 스타일을 통일 시켜주자.

예시) 
- 세미콜론 사용여부
- 의존성 import 순서 조정